[ { "title": "JS：undefined in window？", "url": "/posts/in/", "categories": "JS, SideKnowledge", "tags": "js", "date": "2020-12-03 17:00:00 +0800", "snippet": "in 关键字用来判断一个值是不是某对象的属性例子if(a in window){ console.log(&#39;undefined in window&#39;);}var a;// console：// undefined in windowes3中定义了 undefined 是 window 的一个全局变量" }, { "title": "JS：执行上下文", "url": "/posts/executioncontext/", "categories": "JS, Basic", "tags": "js", "date": "2020-12-03 14:00:00 +0800", "snippet": "" }, { "title": "JS：this关键字", "url": "/posts/this/", "categories": "JS, Basic", "tags": "js", "date": "2020-12-02 09:00:00 +0800", "snippet": " 理解this： 关键字 变量 指向最终调用函数的对象 this指向分类： 函数自调用：window （严格模式下如何？） 构造函数：将要实例化出来的对象 对象.方法()：对象本身 事件的回调函数：指向事件对象 fun_name.call/apply(指定的对象)：指向指定的对象 " }, { "title": "JS：call和apply的用法", "url": "/posts/call&apply/", "categories": "JS, Basic", "tags": "js", "date": "2020-11-30 14:00:00 +0800", "snippet": "apply和call方法可以改变一个函数的执行对象var result_apply = window.add.apply(per, [10, 20]);var result_call = window.add.call(per, 10, 20);function add(num1, num2) { return num1 + num2;}apply和call仅仅只是传参方式不同" }, { "title": "JS：原型链", "url": "/posts/prototypechain/", "categories": "JS, Basic", "tags": "js", "date": "2020-11-30 11:00:00 +0800", "snippet": "使用对象名.属性名调用对象的属性时，会先在当前对象内寻找是否有这个属性，如果没有就到对象的构造函数的原型对象中寻找，再没有再到原型对象的原型对象中找，直到找到null为止，这个链式的查找过程，就是原型链。" }, { "title": "JS：原型对象的应用", "url": "/posts/prototype-application/", "categories": "JS, Basic", "tags": "js", "date": "2020-11-30 09:00:00 +0800", "snippet": "用于存放对象的方法通过构造函数可以实例化任意个数的对象，但这些对象的__proto__指向的构造函数的原型对象却是唯一的。因此可以把对象的公共方法存放在原型对象中，而不是在构造函数的方法体中通过this.的方式来赋值，以达到节省内存空间的目的。function Person(name) { this.name = name;}Person.prototype.eat = function () { console.log(`${this.name} can eat`);}const per = new Person(&#39;xiaoming&#39;);per.eat();..." }, { "title": "平滑滚动动画（JS原生代码）", "url": "/posts/scroller/", "categories": "JS, Component", "tags": "js", "date": "2020-11-24 12:00:00 +0800", "snippet": "实现效果如下大体思路 设置一个高度为容器视图两倍的内容区，并给容器设置样式overflow: hidden; 获取当前轮次动画的初始数据，并通过设置document.scrollTop进行滚动 设置单次滚动的终止条件，我的终止条件是scrollTop达到最大值（scrollTop是有最大值的） 设计上述终止条件后要进行的操作逻辑，达到平滑过渡到下次的目的： 把上方当前不可视的那一半，换成和下方当前可视的这一半一样的内容，下半部分保持不变 修改scrollTop为0，..." }, { "title": "JS：原型对象", "url": "/posts/prototype/", "categories": "JS, Basic", "tags": "js", "date": "2020-11-12 16:00:00 +0800", "snippet": "任何的函数对象在定义的时候都会伴随着一个原型对象prototype出现，原型对象 默认 是Object的实例对象，含有至少 constructor 和 __proto__ 这两个属性。function Person(name, age){ this.name = name; this.age = age;}console.dir(Person);/* 打印结果如下：ƒ Person(name, age) arguments: null caller: null length: 2 name: &quot;Person&quot; prototyp..." }, { "title": "JS：构造函数", "url": "/posts/constructor/", "categories": "JS, Basic", "tags": "js", "date": "2020-11-09 20:00:00 +0800", "snippet": "构造函数的定义构造函数也是函数，使用大驼峰命名（不规范的命名并不会引发错误，但不建议）。来看一个简单的构造函数的例子：function Person(name, age) { console.log(this); this.eat = function () { console.log(&#39;人会吃饭&#39;); } console.log(this); this.name = name; this.age = age; console.log(this);}通过上述构造函数new出来的对象，具有一个eat()方法和name、..." }, { "title": "JS：对象", "url": "/posts/jsobject/", "categories": "JS, Basic", "tags": "js", "date": "2020-11-09 18:00:00 +0800", "snippet": "在js当中，对象就是用{}括起来的，无序的键值对。它表示的是一个具体的实例。在js中，定义对象通常指的是创建一个Object的实例对象。创建特定的实例对象需要用到构造函数。定义对象的方式 字面量定义（最常用） const obj = {}; // 定义了一个对象，没有任何属性和方法 上述obj不能被称作空对象，null更适合被叫做空对象。 构造函数定义（通常不用） const obj = new Object(); // 与用字面量定义是完全一样的 字面量定义实际上是构造函数定义的简写方式，底..." }, { "title": "JS：回调函数", "url": "/posts/callback/", "categories": "JS, Basic", "tags": "js", "date": "2020-11-09 00:00:00 +0800", "snippet": "将一个函数作为参数传给另一个函数，作为参数的那个函数就被称为回调函数。常用于以下几种场景： 事件 定时器 ajax 生命周期回调函数 事件、定时器本身就是一个函数，需要我们自己写回调函数传给它。" }, { "title": "JS：变量作用域", "url": "/posts/variablescope/", "categories": "JS, Basic", "tags": "js", "date": "2020-11-08 00:00:00 +0800", "snippet": "JS中作用域的分类用不同方式声明的变量，起作用的范围是不同。变量起作用的范围被称为变量的作用域。JS变量的作用域有以下3种： 全局作用域 函数作用域 块级作用域(es6)用不同声明方式声明的变量的作用域如下：无关键字直接赋值不使用任何关键字声明，直接赋值的变量，具有全局作用域function f() { function f_inner() { variable = 10; // 第3行 } f_inner();}f();console.log(variable); // 10使用var声明使用var声明在非函数体内的变量，具有全局作用域if(tru..." }, { "title": "JS：预解析", "url": "/posts/preparse/", "categories": "JS, Basic", "tags": "js, pre-parse", "date": "2020-11-08 00:00:00 +0800", "snippet": "预解析又称变量提升、声明提升。在开辟内存时，js会对存在于当前内存中的变量进行一些预处理：把用var声明的变量，以及使用字面量定义的函数，提升到最上方（所有语句之前）。console.log(a); // Uncaught ReferenceError: a is not defineda = 0;console.log(a); // undefinedvar a = 0;console.log(a); // 0console.log(a); // f a() {}var a = &#39;a string&#39;;function a() {};console.log(a); // ..." }, { "title": "JS：数据类型", "url": "/posts/datatypes/", "categories": "JS, Basic", "tags": "js", "date": "2020-11-07 00:00:00 +0800", "snippet": "JS数据类型分类 基本数据类型 number string boolean undefined null 引用数据类型 数组 函数 对象 内置工具对象 undefined类型只有一个值==&amp;gt;undefined。涵义为定义了但是未赋值（未定义就使用会报错）boolean类型只有两个值==&amp;gt;true|falsenull类型只有一个值==&amp;gt;null。通常用于对对象进行初始化或删除typeof使用typeof返回一个 字..." }, { "title": "CET6：整体&amp;部分", "url": "/posts/Whole&Part/", "categories": "CET6, Advanced", "tags": "cet6-compare and understand", "date": "1001-12-28 11:07:09 +0805", "snippet": "integral /ˈɪntɪɡrəl/ adj. 必须的，必不可少的；基本的，作为组成部分的；整体的 Every link is integral to the strength of the chain. 结实的链子得环环相扣。integrate /ˈɪntɪɡreɪ..." }, { "title": "CET6：many laborious hours", "url": "/posts/ManyLaboriousHours/", "categories": "CET6, Advanced", "tags": "cet6-phrase", "date": "1000-12-29 15:07:09 +0805", "snippet": "The young girl spent many laborious hours studying for the test. 这个女孩花费了大量艰苦的时间学习来为考试做准备。 spend many laborious hours --&amp;gt; 花费大量艰苦的时间 " }, { "title": "CET6：integrate together", "url": "/posts/IntegrateTogether/", "categories": "CET6, Advanced", "tags": "cet6-phrase", "date": "1000-12-18 13:07:09 +0805", "snippet": "Our department’s four teams must integrate together to work on new projects. 我们部门的四个小组必须合力推进新项目。 integrate together --&amp;gt; 合并在一起，成为一体 " }, { "title": "CET6：disciplinary actions", "url": "/posts/DisciplinaryActions/", "categories": "CET6, Advanced", "tags": "cet6-phrase", "date": "1000-12-18 13:07:09 +0805", "snippet": "The teacher is taking disciplinary actions against the naughty boy. 老师给了这个淘气的男孩纪律处分 disciplinary actions --&amp;gt; 纪律处分 " }, { "title": "CET6：numerous forms of", "url": "/posts/NumerousFormsOf/", "categories": "CET6, Advanced", "tags": "cet6-phrase", "date": "1000-12-17 23:07:09 +0805", "snippet": "There’re numerous forms of marine life in the sea. 海洋里生活着多种形式的海洋生物。" }, { "title": "CET6：tackle the blaze", "url": "/posts/TackleTheBlaze/", "categories": "CET6, Advanced", "tags": "cet6-phrase", "date": "1000-12-17 21:07:09 +0805", "snippet": "the firefighters successfully tackled the blaze. 消防队员成功地扑灭了大火。" }, { "title": "CET6：roller coaster", "url": "/posts/RollerCoaster/", "categories": "CET6, Advanced", "tags": "cet6-phrase", "date": "1000-12-17 21:07:09 +0805", "snippet": "He is trying to persuade his friend to go on a roller coaster with him. 他正试图说服他的朋友和他一起坐过山车。" }, { "title": "CET6：a period of", "url": "/posts/aPeriodOf/", "categories": "CET6, Advanced", "tags": "cet6-phrase", "date": "1000-12-17 09:07:09 +0805", "snippet": "He became a math teacher over a period of four years. 他花了四年的时间成了一名数学老师（他在四年的时间内成为数学老师）eg：four years –&amp;gt; a period of four years" }, { "title": "CET6：present the evidence", "url": "/posts/PresentTheEvidence/", "categories": "CET6, Advanced", "tags": "cet6-phrase", "date": "1000-12-16 10:07:09 +0805", "snippet": "The court is in session, and the lawyer is presenting the evidence. 庭审进行中，律师正在举证。" }, { "title": "CET6：physical exercise", "url": "/posts/PhysicalExercise/", "categories": "CET6, Advanced", "tags": "cet6-phrase", "date": "1000-12-15 16:07:09 +0805", "snippet": "Physical exercise is good for the body and the mind 体育锻炼有益身心健康。" } ]
