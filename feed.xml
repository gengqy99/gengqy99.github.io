<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://gengqy99.github.io</id><title>Chirpy</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-01-05T15:09:38+08:00</updated> <author> <name>qyex</name> <uri>https://gengqy99.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gengqy99.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator> <rights> © 2021 qyex </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>JS：undefined in window？</title><link href="https://gengqy99.github.io/posts/in/" rel="alternate" type="text/html" title="JS：undefined in window？" /><published>2020-12-03T17:00:00+08:00</published> <updated>2020-12-03T17:00:00+08:00</updated> <id>https://gengqy99.github.io/posts/in/</id> <content src="https://gengqy99.github.io/posts/in/" /> <author> <name>qyex</name> </author> <category term="JS" /> <category term="SideKnowledge" /> <summary> in 关键字用来判断一个值是不是某对象的属性 例子 if(a in window){ console.log('undefined in window'); } var a; // console： // undefined in window es3中定义了 undefined 是 window 的一个全局变量 </summary> </entry> <entry><title>JS：执行上下文</title><link href="https://gengqy99.github.io/posts/executioncontext/" rel="alternate" type="text/html" title="JS：执行上下文" /><published>2020-12-03T14:00:00+08:00</published> <updated>2020-12-03T14:00:00+08:00</updated> <id>https://gengqy99.github.io/posts/executioncontext/</id> <content src="https://gengqy99.github.io/posts/executioncontext/" /> <author> <name>qyex</name> </author> <category term="JS" /> <category term="Basic" /> <summary> </summary> </entry> <entry><title>JS：this关键字</title><link href="https://gengqy99.github.io/posts/this/" rel="alternate" type="text/html" title="JS：this关键字" /><published>2020-12-02T09:00:00+08:00</published> <updated>2020-12-02T09:00:00+08:00</updated> <id>https://gengqy99.github.io/posts/this/</id> <content src="https://gengqy99.github.io/posts/this/" /> <author> <name>qyex</name> </author> <category term="JS" /> <category term="Basic" /> <summary> 理解this： 关键字 变量 指向最终调用函数的对象 this指向分类： 函数自调用：window （严格模式下如何？） 构造函数：将要实例化出来的对象 对象.方法()：对象本身 事件的回调函数：指向事件对象 fun_name.call/apply(指定的对象)：指向指定的对象 </summary> </entry> <entry><title>JS：call和apply的用法</title><link href="https://gengqy99.github.io/posts/call&amp;apply/" rel="alternate" type="text/html" title="JS：call和apply的用法" /><published>2020-11-30T14:00:00+08:00</published> <updated>2020-11-30T14:00:00+08:00</updated> <id>https://gengqy99.github.io/posts/call&amp;apply/</id> <content src="https://gengqy99.github.io/posts/call&amp;apply/" /> <author> <name>qyex</name> </author> <category term="JS" /> <category term="Basic" /> <summary> apply和call方法可以改变一个函数的执行对象 var result_apply = window.add.apply(per, [10, 20]); var result_call = window.add.call(per, 10, 20); function add(num1, num2) { return num1 + num2; } apply和call仅仅只是传参方式不同 </summary> </entry> <entry><title>JS：原型链</title><link href="https://gengqy99.github.io/posts/prototypechain/" rel="alternate" type="text/html" title="JS：原型链" /><published>2020-11-30T11:00:00+08:00</published> <updated>2020-11-30T11:00:00+08:00</updated> <id>https://gengqy99.github.io/posts/prototypechain/</id> <content src="https://gengqy99.github.io/posts/prototypechain/" /> <author> <name>qyex</name> </author> <category term="JS" /> <category term="Basic" /> <summary> 使用对象名.属性名调用对象的属性时，会先在当前对象内寻找是否有这个属性，如果没有就到对象的构造函数的原型对象中寻找，再没有再到原型对象的原型对象中找，直到找到null为止，这个链式的查找过程，就是原型链。 </summary> </entry> </feed>
